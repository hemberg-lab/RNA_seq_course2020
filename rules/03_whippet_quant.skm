rule whippet_index:
    input:
        #genome = "Genome/" + config["assembly"] + ".fa",
        genome = config["Genome"],
        gtf = "gffcompare/extended_ref_annotation.gtf"
    params:
        bin = config["whippet_bin_folder"]
    output:
        index = "Whippet/Index/whippet.jls",
        exons = "Whippet/Index/whippet.jls.exons.tab.gz"
    log:
        "logs/whippet_index.log"
    shell:
        "julia {params.bin}/whippet-index.jl --fasta {input.genome} --gtf {input.gtf} --index {output.index} 2> {log}"


def circ():
    param = ""
    
    if "backsplicing" in config:
        if str2bool(config["backsplicing"]):
            param = "--circ"
            
    return(param)
    

if str2bool(config["paired_end"])==False:

    rule  whippet_quant:
        input:
            #fastq = "FASTQ/{sample}.fastq.gz",
            fastq = lambda w : sample_files[w.sample],
            index = "Whippet/Index/whippet.jls"
        params:
            bin = config["whippet_bin_folder"],
            output = "Whippet/Quant/{sample}",
            other_flags = circ()
        output:
            temp("Whippet/Quant/{sample}.gene.tpm.gz"),
            temp("Whippet/Quant/{sample}.isoform.tpm.gz"),
            temp("Whippet/Quant/{sample}.jnc.gz"),
            temp("Whippet/Quant/{sample}.map.gz"),
            temp("Whippet/Quant/{sample}.psi.gz")
        shell:
            "julia {params.bin}/whippet-quant.jl {input.fastq} -x {input.index} -o {params.output} {params.other_flags}"


elif str2bool(config["paired_end"])==True:

    rule  whippet_quant:
        input:
            rd1 = "FASTQ/{sample}_1.fastq.gz",
            rd2 = "FASTQ/{sample}_2.fastq.gz",
            index = "Whippet/Index/whippet.jls"
        params:
            bin = config["whippet_bin_folder"],
            output = "Whippet/Quant/{sample}",
            other_flags = circ()
        output:
            temp("Whippet/Quant/{sample}.gene.tpm.gz"),
            temp("Whippet/Quant/{sample}.isoform.tpm.gz"),
            temp("Whippet/Quant/{sample}.jnc.gz"),
            temp("Whippet/Quant/{sample}.map.gz"),
            temp("Whippet/Quant/{sample}.psi.gz")
        shell:
            "julia {params.bin}/whippet-quant.jl {input.rd1} {input.rd2} -x {input.index} -o {params.output} {params.other_flags}"
            
def get_files_by_cluster(cluster, ext):
    path="Whippet/Quant/"
    return([path + sample_files[x] + ext for x in samples_by_cluster[cluster]])

print(get_files_by_cluster("Surface_ectoderm_2", ".gene.tpm.gz") )

rule merge_quant_by_cluster:
    input:
        gene = lambda w : get_files_by_cluster(w.cluster, ".gene.tpm.gz"),
        isoform = lambda w : get_files_by_cluster(w.cluster, ".isoform.tpm.gz"),
        jnc =  lambda w : get_files_by_cluster(w.cluster, ".jnc.gz"),
        map =  lambda w : get_files_by_cluster(w.cluster, ".map.gz"),
        psi =  lambda w : get_files_by_cluster(w.cluster, ".psi.gz")
    output:
        merged_gene = "Whippet/Quant/Merge/{cluster}.gene.tpm.tsv",
        merged_isoform = "Whippet/Quant/Merge/{cluster}.isoform.tpm.tsv"
    shell:
        "python scripts/merge_quant.py Gene {output.merged_gene} {input.gene} && python scripts/merge_quant.py Isoform {output.merged_isoform} {input.isoform}"
        
        
rule all_quant:
    #input: expand("Whippet/Quant/{sample}.psi.gz", sample=sample_files.keys())
    input: 
        expand("Whippet/Quant/Merge/{cluster}.gene.tpm.tsv", cluster=samples_by_cluster.keys()),
        expand("Whippet/Quant/Merge/{cluster}.isoform.tpm.tsv", cluster=samples_by_cluster.keys())
