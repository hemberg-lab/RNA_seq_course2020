import glob, os
import csv
from collections import defaultdict

def str2bool(v):
  if v==True:
    return True
  elif v==False:
    return False
  else:
    return v.lower() in ("yes", "true", "t", "1")

try:
    os.mkdir("FASTQ")
except FileExistsError:
    pass

try:
    os.mkdir("download")
except FileExistsError:
    pass

try:
    os.mkdir("logs")
except FileExistsError:
    pass

paired_end = set([])
single_end = set([])

for i in units.index:
	n = len(units.loc[i, ("fq1", "fq2")].dropna())
	if n == 1:
		paired_end.add(i[0])	
	if n == 2:
		paired_end.add(i[0])


SAMPLES = set([])
from_ncbi = set([])

if os.path.isfile(config["accession_list"]):

    with open(config["accession_list"]) as file :

        reader = csv.reader(file, delimiter="\t")
        for row in reader:

            RUN = row[0]
            SAMPLES.add(RUN)
            from_ncbi  = set([])
            file_name = "download/" + RUN + ".download.sh"
            command = "fastq-dump.2.9.1 --split-files -O FASTQ --gzip "

            if len(glob.glob(file_name))==0: #Check if the file is there, as if this file is overwriten everything will start from scratch

                download_file =  open(file_name, "w")

                download_file.write("#!/bin/bash" + "\n")
                download_file.write('srr="' + RUN + '"' + "\n" )
                download_file.write(command + " " + RUN + "\n")

                
                #if str2bool(config["paired_end"])==False:
				
                download_file.write( "numLines=$(fastq-dump.2.9.1 -X 1 -Z --split-spot $srr | wc -l)" + "\n")
                download_file.write( "if [ $numLines -eq 8 ]; then cat FASTQ/${srr}_1.fastq FASTQ/${srr}_2.fastq > FASTQ/$srr.fastq && rm FASTQ/${srr}_1.fastq FASTQ/${srr}_2.fastq; fi"  + "\n")
                download_file.write( "if [ -f FASTQ/${srr}_1.fastq ]; then mv FASTQ/${srr}_1.fastq FASTQ/${srr}.fastq ; elif [ -f FASTQ/${srr}_2.fastq ]; then mv FASTQ/${srr}_2.fastq FASTQ/${srr}.fastq; fi"  + "\n")
                download_file.write("gzip FASTQ/${srr}.fastq"+ "\n")

                #elif str2bool(config["paired_end"])==True:
                
                    #download_file.write("gzip FASTQ/${srr}_1.fastq"+ "\n")
                    #download_file.write("gzip FASTQ/${srr}_2.fastq"+ "\n")


from_url = set([])

if os.path.isfile("./sample_url.tsv"):
    
    with open("./sample_url.tsv") as file :

        reader = csv.DictReader(file, delimiter="\t")

        for row in reader:

            SAMPLES.add(row["sample"])
            from_url.add(row["sample"])

            file_name = "download/" + row["sample"]  + ".download.sh"


            if len(glob.glob(file_name))==0: #Check if the file is there, as if this file is overwriten everything will start from scratch

                download_file =  open(file_name, "w")

                download_file.write("#!/bin/bash" + "\n")
                download_file.write("wget -r " + row["url"] +  " -O FASTQ/" + row["sample"]  + ".fastq.gz" + "\n")
                download_file.write("gzip -d FASTQ/" + row["sample"]  + ".fastq.gz" + "\n")




if os.path.isfile('download/genome.download.sh')==False:
    
    with open("download/genome.download.sh", "w") as download_file :
        
        download_file.write("#!/bin/bash" + "\n")
        download_file.write("wget http://hgdownload.soe.ucsc.edu/goldenPath/" + config["assembly"] + "/bigZips/" + config["assembly"] + ".ensGene.fa.gz -O Genome/" + config["assembly"] + ".fa.gz"  + "\n")
        download_file.write("gzip -d Genome/" + config["assembly"] + ".fa.gz")

if os.path.isfile('download/transcriptome.download.sh')==False:
    
    with open("download/transcriptome.download.sh", "w") as download_file :
        
        download_file.write("#!/bin/bash" + "\n")
        download_file.write("wget ftp://hgdownload.soe.ucsc.edu/goldenPath/" + config["assembly"] + "/bigZips/genes/" + config["assembly"] + ".ensGene.gtf.gz -O Gene_annotation/" + config["assembly"] + ".gtf.gz"  + "\n")
        download_file.write("gzip -d Gene_annotation/" + config["assembly"] + ".gtf.gz")

        
rule download_genome:
    input:
        "download/genome.download.sh"
    output:
        "Genome/" + config["assembly"] + ".fa"
    conda:
        "../envs/download.yaml"
    log:
        "logs/download_genome.log",
    shell:
        "bash {input} 2> {log}"


if str2bool(config["download_transcriptome"])==True:

    rule download_transcriptome:
        input:
            "download/transcriptome.download.sh"
        output:
            "Gene_annotation/" + config["assembly"] + ".ensGene.gtf"
        conda:
            "../envs/download.yaml"
        log:
            "logs/download_transcriptome.log",
        shell:
            "bash {input} 2> {log}"





def get_download_output(wildcards):
	if wildcards.sample in from_ncbi:
		if wildcards.sample in single_end:
			return "FASTQ/{wildcards.sample}.fastq.gz" 		
		elif wildcards.sample in paired_end:
			return ["FASTQ/{wildcards.sample}_1.fastq.gz", "FASTQ/{wildcards.sample}_2.fastq.gz"]
	elif sample in from_url:
		return "FASTQ/{wildcards.sample}.fastq.gz" 
		

rule download_sample:
	input:
		"download/{sample}.download.sh"
	output:
		temp(get_download_output())
	conda:
		"../envs/download.yaml"        
	resources:
		get_data = 1         
	log:
		"logs/download.{sample}.log"   
	shell:
		"bash {input} 2> {log}" 
  

        
        

#if str2bool(config["paired_end"])==False:

#    rule download_sample:
#        input:
#            "download/{sample}.download.sh"
#        output:
#            "FASTQ/{sample}.fastq.gz"
#        conda:
#            "../envs/download.yaml"        
#        resources:
#            get_data = 1         
#        log:
#            "logs/download.{sample}.log"   
#        shell:
#            "bash {input} 2> {log}"


#elif str2bool(config["paired_end"])==True:

#    rule download_sample:
#        input:
#            "download/{sample}.download.sh"
#        output:
#            "FASTQ/{sample}_1.fastq.gz",
#            "FASTQ/{sample}_2.fastq.gz"
#        conda:
#            "../envs/download.yaml"        
#        resources:
#            get_data = 1         
#        log:
#            "logs/download.{sample}.log"   
#        shell:
#            "bash {input} 2> {log}"


###### Target decision tree ####


if str2bool(config["download_transcriptome"])==True:

    if str2bool(config["paired_end"])==False:
    
        rule download_all:
            input:
                "Gene_annotation/" + config["assembly"] + ".ensGene.gtf",
                "Genome/" + config["assembly"] + ".fa",
                expand("FASTQ/{sample}.fastq.gz", sample=SAMPLES)

    else:
    
        rule download_all:
            input:
                "Gene_annotation/" + config["assembly"] + ".ensGene.gtf",
                "Genome/" + config["assembly"] + ".fa",
                expand("FASTQ/{sample}_{rd}.fastq.gz", sample=SAMPLES, rd=[1,2])
          

else:

    if str2bool(config["paired_end"])==False:
    
        rule download_all:
            input:
                "Genome/" + config["assembly"] + ".fa",
                expand("FASTQ/{sample}.fastq.gz", sample=SAMPLES)

    else:
    
        rule download_all:
            input:
                "Genome/" + config["assembly"] + ".fa",
                expand("FASTQ/{sample}_{rd}.fastq.gz", sample=SAMPLES, rd=[1,2])
