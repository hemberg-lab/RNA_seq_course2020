rule whippet_index_ref:
    input:
        genome = "Genome/" + config["assembly"] + ".fa",
        gtf = "Gene_annotation/" + config["assembly"] + ".gtf"
    params:
        bin = config["whippet_bin_folder"]
    output:
        index = "Whippet/Index/ref/whippet.jls",
        exons = "Whippet/Index/ref/whippet.jls.exons.tab.gz"
    log:
        "logs/whippet_index.log"
    shell:
        "julia {params.bin}/whippet-index.jl --fasta {input.genome} --gtf {input.gtf} --index {output.index} 2> {log}"


def circ():
    param = ""
    
    if "backsplicing" in config:
        if str2bool(config["backsplicing"]):
            param = "--circ"
            
    return(param)


def sample_to_unit(sample):
    return units.loc[(sample, "1" ) , ("fq1", "fq2") ].dropna() # We are not yet supporting for lanes

#def get_fastq(wildcards):
#    return units.loc[(wildcards.sample, wildcards.unit), ["fq1", "fq2"]].dropna()


rule  whippet_quant_ref:
    input:
        fastq = sample_to_unit(wildcards.sample)
        rd1 = "FASTQ/{sample}_1.fastq.gz",
        rd2 = "FASTQ/{sample}_2.fastq.gz",
        index = "Whippet/Index/ref/whippet.jls"
    params:
        bin = config["whippet_bin_folder"],
        output = "Whippet/Quant/ref/{sample}",
        other_flags = circ()
    output:
        "Whippet/Quant/ref/{sample}.gene.tpm.gz",
        "Whippet/Quant/ref/{sample}.isoform.tpm.gz",
        "Whippet/Quant/ref/{sample}.jnc.gz",
        "Whippet/Quant/ref/{sample}.map.gz",
        "Whippet/Quant/ref/{sample}.psi.gz"
    shell:
        "julia {params.bin}/whippet-quant.jl {input.fastq} -x {input.index} -o {params.output} {params.other_flags}"
