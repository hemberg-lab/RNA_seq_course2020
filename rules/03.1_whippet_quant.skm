rule whippet_index_ref:
    input:
        genome = "Genome/" + config["assembly"] + ".fa",
        gtf = "Gene_annotation/" + config["assembly"] + ".gtf"
    params:
        bin = config["whippet_bin_folder"]
    output:
        index = "Whippet/Index/ref/whippet.jls",
        exons = "Whippet/Index/ref/whippet.jls.exons.tab.gz"
    log:
        "logs/whippet_index.log"
    shell:
        "julia {params.bin}/whippet-index.jl --fasta {input.genome} --gtf {input.gtf} --index {output.index} 2> {log}"


def circ():
    param = ""
    
    if "backsplicing" in config:
        if str2bool(config["backsplicing"]):
            param = "--circ"
            
    return(param)
    

if str2bool(config["paired_end"])==False:

    rule  whippet_quant_ref:
        input:
            fastq = "FASTQ/{sample}.fastq.gz",
            index = "Whippet/Index/ref/whippet.jls"
        params:
            bin = config["whippet_bin_folder"],
            output = "Whippet/Quant/ref/{sample}",
            other_flags = circ()
        output:
            "Whippet/Quant/ref/{sample}.gene.tpm.gz",
            "Whippet/Quant/ref/{sample}.isoform.tpm.gz",
            "Whippet/Quant/ref/{sample}.jnc.gz",
            "Whippet/Quant/ref/{sample}.map.gz",
            "Whippet/Quant/ref/{sample}.psi.gz"
        shell:
            "julia {params.bin}/whippet-quant.jl {input.fastq} -x {input.index} -o {params.output} {params.other_flags}"


elif str2bool(config["paired_end"])==True:

    rule  whippet_quant_ref:
        input:
            rd1 = "FASTQ/{sample}_1.fastq.gz",
            rd2 = "FASTQ/{sample}_2.fastq.gz",
            index = "Whippet/Index/ref/whippet.jls"
        params:
            bin = config["whippet_bin_folder"],
            output = "Whippet/Quant/ref/{sample}",
            other_flags = circ()
        output:
            "Whippet/Quant/ref/{sample}.gene.tpm.gz",
            "Whippet/Quant/ref/{sample}.isoform.tpm.gz",
            "Whippet/Quant/ref/{sample}.jnc.gz",
            "Whippet/Quant/ref/{sample}.map.gz",
            "Whippet/Quant/ref/{sample}.psi.gz"
        shell:
            "julia {params.bin}/whippet-quant.jl {input.rd1} {input.rd2} -x {input.index} -o {params.output} {params.other_flags}"
