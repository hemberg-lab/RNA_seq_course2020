rule whippet_index_ref:
    input:
        genome = "Genome/" + config["assembly"] + ".fa",
        gtf = "Gene_annotation/" + config["assembly"] + ".ensGene.gtf"
    params:
        bin = config["whippet_bin_folder"]
    output:
        index = "Whippet/Index/ref/whippet.jls",
        exons = "Whippet/Index/ref/whippet.jls.exons.tab.gz"
    log:
        "logs/whippet_index.log"
    shell:
        "julia {params.bin}/whippet-index.jl --fasta {input.genome} --gtf {input.gtf} --index {output.index} 2> {log}"


def circ():
    param = ""
    
    if "backsplicing" in config:
        if str2bool(config["backsplicing"]):
            param = "--circ"
            
    return(param)


def sample_to_unit(wildcards):
    return units.loc[(wildcards.sample, "1" ) , ("fq1", "fq2") ].dropna() # We are not yet supporting for lanes

#def get_fastq(wildcards):
#    return units.loc[(wildcards.sample, wildcards.unit), ["fq1", "fq2"]].dropna()

if str2bool(config.get("group_by_cluster", False)):

    rule  whippet_quant_red:
        input:
            fastq = lambda w : sample_files[w.sample],
            index = "Whippet/Index/ref/whippet.jls"
        params:
            bin = config["whippet_bin_folder"],
            output = "Whippet/Quant/ref/{sample}",
            other_flags = circ()
        output:
            temp("Whippet/Quant/ref/{sample}.gene.tpm.gz"),
            temp("Whippet/Quant/ref/{sample}.isoform.tpm.gz"),
            temp("Whippet/Quant/ref/{sample}.jnc.gz"),
            temp("Whippet/Quant/ref/{sample}.map.gz"),
            temp("Whippet/Quant/ref/{sample}.psi.gz")
        shell:
            "julia {params.bin}/whippet-quant.jl {input.fastq} -x {input.index} -o {params.output} {params.other_flags}"


else:
    rule  whippet_quant_ref:
        input:
            fastq = sample_to_unit,
            index = "Whippet/Index/ref/whippet.jls"
        params:
            bin = config["whippet_bin_folder"],
            output = "Whippet/Quant/ref/{sample}",
            other_flags = circ()
        output:
            "Whippet/Quant/ref/{sample}.gene.tpm.gz",
            "Whippet/Quant/ref/{sample}.isoform.tpm.gz",
            "Whippet/Quant/ref/{sample}.jnc.gz",
            "Whippet/Quant/ref/{sample}.map.gz",
            "Whippet/Quant/ref/{sample}.psi.gz"
        shell:
            "julia {params.bin}/whippet-quant.jl {input.fastq} -x {input.index} -o {params.output} {params.other_flags}"


def get_files_by_cluster(cluster, ext):
    path="Whippet/Quant/"
    return([path + x + ext for x in samples_by_cluster[cluster]])


rule merge_quant_by_cluster_gene_ref:
    input:
        files = lambda w : get_files_by_cluster(w.cluster, ".gene.tpm.gz"),
        jnc =  lambda w : get_files_by_cluster(w.cluster, ".jnc.gz"),
        map =  lambda w : get_files_by_cluster(w.cluster, ".map.gz"),
        psi =  lambda w : get_files_by_cluster(w.cluster, ".psi.gz")
    params:
        cluster_dir = "Whippet/Quant/ref/{cluster}",
        feature = "Gene"
    output:
        merged = "Whippet/Quant/ref/Merge/{cluster}.gene.tpm.tsv"
    script:
        "../scripts/merge_quant.py"
        
        
rule merge_quant_by_cluster_isoform_ref:
    input:
        files = lambda w : get_files_by_cluster(w.cluster, ".isoform.tpm.gz"),
        jnc =  lambda w : get_files_by_cluster(w.cluster, ".jnc.gz"),
        map =  lambda w : get_files_by_cluster(w.cluster, ".map.gz"),
        psi =  lambda w : get_files_by_cluster(w.cluster, ".psi.gz")
    params:
        cluster_dir = "Whippet/Quant/ref/{cluster}",
        feature = "Isoform"
    output:
        merged = "Whippet/Quant/ref/Merge/{cluster}.isoform.tpm.tsv"
    script:
        "../scripts/merge_quant.py"
        
        
rule all_quant_ref:
    #input: expand("Whippet/Quant/{sample}.psi.gz", sample=sample_files.keys())
    input: 
        expand("Whippet/Quant/ref/Merge/{cluster}.gene.tpm.tsv", cluster=samples_by_cluster.keys()),
        expand("Whippet/Quant/ref/Merge/{cluster}.isoform.tpm.tsv", cluster=samples_by_cluster.keys())
